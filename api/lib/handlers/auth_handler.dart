import 'dart:convert';
import 'package:shelf/shelf.dart';
import 'package:shelf_router/shelf_router.dart';
import '../repositories/user_repository.dart';
import '../utils/jwt_helper.dart';
import '../utils/response_helper.dart';
import '../models/user.dart';

class AuthHandler {
  final UserRepository userRepository;

  AuthHandler(this.userRepository);

  Router get router {
    final router = Router();

    router.post('/login', _login);
    router.post('/register', _register);
    router.get('/me', _getCurrentUser);

    return router;
  }

  Future<Response> _login(Request request) async {
    try {
      final body = await request.readAsString();
      final data = json.decode(body) as Map<String, dynamic>;

      final username = data['username'] as String?;
      final password = data['password'] as String?;

      if (username == null || password == null) {
        return ResponseHelper.badRequest('Username and password are required');
      }

      final user = await userRepository.getByUsername(username);

      if (user == null) {
        return ResponseHelper.error(
          message: 'Invalid username or password',
          statusCode: 401,
        );
      }

      if (!userRepository.verifyPassword(user, password)) {
        return ResponseHelper.error(
          message: 'Invalid username or password',
          statusCode: 401,
        );
      }

      final token = JwtHelper.generateToken(user.id, user.username, user.role);

      return ResponseHelper.success(
        data: {
          'token': token,
          'user': user.toSafeJson(),
        },
        message: 'Login successful',
      );
    } catch (e) {
      return ResponseHelper.internalError(e.toString());
    }
  }

  Future<Response> _register(Request request) async {
    try {
      final body = await request.readAsString();
      final data = json.decode(body) as Map<String, dynamic>;

      final username = data['username'] as String?;
      final password = data['password'] as String?;
      final name = data['name'] as String?;

      if (username == null || password == null || name == null) {
        return ResponseHelper.badRequest(
            'Username, password, and name are required');
      }

      // Check if username exists
      if (await userRepository.usernameExists(username)) {
        return ResponseHelper.badRequest('Username already exists');
      }

      final newUser = User(
        id: '', // Will be generated by repository
        username: username,
        password: password, // Will be hashed by repository
        name: name,
        role: data['role'] ?? 'cashier',
        outletIds: data['outletIds'] ?? [],
        outletName: data['outletName'],
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      final user = await userRepository.create(newUser);

      return ResponseHelper.success(
        data: user.toSafeJson(),
        message: 'User registered successfully',
        statusCode: 201,
      );
    } catch (e) {
      return ResponseHelper.internalError(e.toString());
    }
  }

  Future<Response> _getCurrentUser(Request request) async {
    try {
      final userId = request.context['userId'] as String?;

      if (userId == null) {
        return ResponseHelper.unauthorized();
      }

      final user = await userRepository.getById(userId);

      if (user == null) {
        return ResponseHelper.notFound('User not found');
      }

      return ResponseHelper.success(data: user.toSafeJson());
    } catch (e) {
      return ResponseHelper.internalError(e.toString());
    }
  }
}
